name: Docker

on:
  schedule:
    - cron: "27 0 * * *"
  push:
    branches: ["main"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write  # Required for OIDC token generation
      attestations: write  # Required for provenance attestations

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Debug: Print environment information
      - name: Debug environment
        if: github.event_name != 'pull_request'
        run: |
          echo "Registry: ${{ env.REGISTRY }}"
          echo "Image name: ${{ env.IMAGE_NAME }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Token available: ${{ secrets.GITHUB_TOKEN != '' }}"

      # Login against a Docker registry except on PR
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT }}
          logout: false

      # Extract metadata (tags, labels) for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule,pattern=nightly
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=edge
            type=raw,value=latest,enable=${{ github.ref_type == 'tag' && startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-') }}
          labels: |
            org.opencontainers.image.title=McPortfolio
            org.opencontainers.image.description=LLM-Driven Portfolio Optimization MCP Server
            org.opencontainers.image.vendor=ebrandler

      # Debug: Show what will be built
      - name: Debug build information
        if: github.event_name != 'pull_request'
        run: |
          echo "Tags to be built:"
          echo "${{ steps.meta.outputs.tags }}"
          echo "Labels to be applied:"
          echo "${{ steps.meta.outputs.labels }}"

      # Build and push Docker image with Buildx
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ github.event_name != 'pull_request' && 'linux/amd64,linux/arm64' || '' }}
          provenance: ${{ github.event_name != 'pull_request' }}
          load: ${{ github.event_name == 'pull_request' }}
          outputs: ${{ github.event_name != 'pull_request' && 'type=image,name=target,annotation-index.org.opencontainers.image.description=McPortfolio MCP Server' || 'type=image,name=target' }}

      # Verify push success and test image
      - name: Verify Docker image push
        if: github.event_name != 'pull_request'
        run: |
          echo "Verifying pushed images..."
          for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n'); do
            echo "Checking tag: $tag"
            docker manifest inspect "$tag" || echo "Warning: Could not inspect $tag"
          done

      # Test Docker image if not pushing (PR context)
      - name: Test Docker image
        if: github.event_name == 'pull_request'
        run: |
          docker images
          # Test that the image can start
          docker run --rm -d --name test-mcportfolio -p 8001:8001 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}
          sleep 10
          # Test health endpoint
          curl -f http://localhost:8001/health || exit 1
          # Clean up
          docker stop test-mcportfolio
